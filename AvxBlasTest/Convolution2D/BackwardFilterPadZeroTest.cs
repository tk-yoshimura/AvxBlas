using AvxBlas;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Linq;

namespace AvxBlasTest.Connection2DTest {
    [TestClass]
    public class BackwardFilterPadZeroTest {
        [TestMethod]
        public void SBackwardFilterPadZeroTest() {
            float max_err = 0;

            foreach (uint n in new int[] { 1, 2 }) {
                foreach ((uint iw, uint ih) in new (uint, uint)[] { (1, 1), (1, 2), (4, 3), (5, 8), (16, 15), (17, 28), (32, 30) }) {
                    foreach ((uint kw, uint kh) in new (uint, uint)[] { (1, 3), (3, 1), (3, 3), (3, 5), (5, 3), (7, 7) }) {
                        uint ow = iw, oh = ih;

                        foreach ((uint ic, uint oc) in new (uint, uint)[] { (1, 1), (2, 3), (3, 2), (4, 5), (5, 4), (8, 10), (10, 8),
                                                                            (7, 16), (16, 7), (9, 24), (24, 9), (31, 32), (32, 31), (15, 64), (64, 15) }) {

                            float[] xval = (new float[iw * ih * ic * n]).Select((_, idx) => idx * 1e-3f).ToArray();
                            float[] gyval = (new float[ow * oh * oc * n]).Select((_, idx) => idx * 1e-3f).Reverse().ToArray();

                            Map2D x = new((int)ic, (int)iw, (int)ih, (int)n, xval);
                            Map2D gy = new((int)oc, (int)ow, (int)oh, (int)n, gyval);

                            Filter2D gw = Reference(x, gy, (int)kw, (int)kh);

                            Array<float> x_tensor = xval;
                            Array<float> gy_tensor = gyval;

                            Array<float> gw_tensor = new(ic * oc * kw * kh, zeroset: false);

                            Convolution2D.BackwardFilter(n, ic, oc, iw, ih, kw, kh, PadMode.Zero, x_tensor, gy_tensor, gw_tensor);

                            float[] gw_expect = gw.ToFloatArray();
                            float[] gw_actual = gw_tensor;

                            CollectionAssert.AreEqual(xval, (float[])x_tensor);
                            CollectionAssert.AreEqual(gyval, (float[])gy_tensor);

                            AssertError.Tolerance(gw_expect, gw_actual, 1e-6f, 1e-4f, ref max_err, $"NG: {ic},{oc},{iw},{ih},{kw},{kh},{n}");

                            Console.WriteLine($"OK: {ic},{oc},{iw},{ih},{kw},{kh},{n}");
                        }
                    }
                }
            }

            Console.WriteLine($"maxerr:{max_err}");
        }

        public static Filter2D Reference(Map2D x, Map2D gy, int kw, int kh) {
            int inchannels = x.Channels, outchannels = gy.Channels, batch = x.Batch;
            int iw = x.Width, ow = gy.Width, ih = x.Height, oh = gy.Height;

            if (ow != iw || oh != ih) {
                throw new ArgumentException("mismatch shape");
            }

            Filter2D w = new(inchannels, kw, kh, outchannels);

            for (int th = 0; th < batch; th++) {
                for (int ky = 0; ky < kh; ky++) {
                    for (int kx = 0; kx < kw; kx++) {
                        for (int oy = 0; oy < oh; oy++) {
                            int iy = ky + oy - kh / 2;
                            if (iy < 0 || iy >= ih) {
                                continue;
                            }

                            for (int ox = 0; ox < ow; ox++) {
                                int ix = kx + ox - kw / 2;
                                if (ix < 0 || ix >= iw) {
                                    continue;
                                }

                                for (int inch, outch = 0; outch < outchannels; outch++) {
                                    for (inch = 0; inch < inchannels; inch++) {
                                        w[inch, kx, ky, outch] += x[inch, ix, iy, th] * gy[outch, ox, oy, th];
                                    }
                                }
                            }
                        }
                    }
                }
            }

            return w;
        }

        [TestMethod]
        public void ReferenceTest() {
            int inchannels = 4, outchannels = 6;
            int kwidth = 3, kheight = 5, inwidth = 9, inheight = 13;
            int outwidth = inwidth, outheight = inheight;

            float[] xval = (new float[inwidth * inheight * inchannels]).Select((_, idx) => idx * 1e-3f).ToArray();
            float[] gyval = (new float[outwidth * outheight * outchannels]).Select((_, idx) => idx * 1e-3f).Reverse().ToArray();

            Map2D x = new(inchannels, inwidth, inheight, 1, xval);
            Map2D gy = new(outchannels, outwidth, outheight, 1, gyval);

            Filter2D gw = Reference(x, gy, kwidth, kheight);

            float[] gw_expect = {
                3.331504000e+00f, 3.357552000e+00f, 3.383600000e+00f, 3.409648000e+00f, 3.861396000e+00f, 3.890997000e+00f, 3.920598000e+00f, 3.950199000e+00f, 3.540240000e+00f, 3.566816000e+00f, 3.593392000e+00f, 3.619968000e+00f,
                4.337664000e+00f, 4.368672000e+00f, 4.399680000e+00f, 4.430688000e+00f, 5.015304000e+00f, 5.050512000e+00f, 5.085720000e+00f, 5.120928000e+00f, 4.586112000e+00f, 4.617696000e+00f, 4.649280000e+00f, 4.680864000e+00f,
                5.528432000e+00f, 5.564832000e+00f, 5.601232000e+00f, 5.637632000e+00f, 6.378840000e+00f, 6.420141000e+00f, 6.461442000e+00f, 6.502743000e+00f, 5.820048000e+00f, 5.857072000e+00f, 5.894096000e+00f, 5.931120000e+00f,
                6.739584000e+00f, 6.775776000e+00f, 6.811968000e+00f, 6.848160000e+00f, 7.740792000e+00f, 7.781832000e+00f, 7.822872000e+00f, 7.863912000e+00f, 7.029504000e+00f, 7.066272000e+00f, 7.103040000e+00f, 7.139808000e+00f,
                7.735024000e+00f, 7.770576000e+00f, 7.806128000e+00f, 7.841680000e+00f, 8.858124000e+00f, 8.898417000e+00f, 8.938710000e+00f, 8.979003000e+00f, 8.019792000e+00f, 8.055872000e+00f, 8.091952000e+00f, 8.128032000e+00f,
                3.314432000e+00f, 3.340392000e+00f, 3.366352000e+00f, 3.392312000e+00f, 3.841992000e+00f, 3.871494000e+00f, 3.900996000e+00f, 3.930498000e+00f, 3.522816000e+00f, 3.549304000e+00f, 3.575792000e+00f, 3.602280000e+00f,
                4.317312000e+00f, 4.348224000e+00f, 4.379136000e+00f, 4.410048000e+00f, 4.992192000e+00f, 5.027292000e+00f, 5.062392000e+00f, 5.097492000e+00f, 4.565376000e+00f, 4.596864000e+00f, 4.628352000e+00f, 4.659840000e+00f,
                5.504512000e+00f, 5.540808000e+00f, 5.577104000e+00f, 5.613400000e+00f, 6.351696000e+00f, 6.392880000e+00f, 6.434064000e+00f, 6.475248000e+00f, 5.795712000e+00f, 5.832632000e+00f, 5.869552000e+00f, 5.906472000e+00f,
                6.715776000e+00f, 6.751872000e+00f, 6.787968000e+00f, 6.824064000e+00f, 7.713792000e+00f, 7.754724000e+00f, 7.795656000e+00f, 7.836588000e+00f, 7.005312000e+00f, 7.041984000e+00f, 7.078656000e+00f, 7.115328000e+00f,
                7.711616000e+00f, 7.747080000e+00f, 7.782544000e+00f, 7.818008000e+00f, 8.831592000e+00f, 8.871786000e+00f, 8.911980000e+00f, 8.952174000e+00f, 7.996032000e+00f, 8.032024000e+00f, 8.068016000e+00f, 8.104008000e+00f,
                3.297360000e+00f, 3.323232000e+00f, 3.349104000e+00f, 3.374976000e+00f, 3.822588000e+00f, 3.851991000e+00f, 3.881394000e+00f, 3.910797000e+00f, 3.505392000e+00f, 3.531792000e+00f, 3.558192000e+00f, 3.584592000e+00f,
                4.296960000e+00f, 4.327776000e+00f, 4.358592000e+00f, 4.389408000e+00f, 4.969080000e+00f, 5.004072000e+00f, 5.039064000e+00f, 5.074056000e+00f, 4.544640000e+00f, 4.576032000e+00f, 4.607424000e+00f, 4.638816000e+00f,
                5.480592000e+00f, 5.516784000e+00f, 5.552976000e+00f, 5.589168000e+00f, 6.324552000e+00f, 6.365619000e+00f, 6.406686000e+00f, 6.447753000e+00f, 5.771376000e+00f, 5.808192000e+00f, 5.845008000e+00f, 5.881824000e+00f,
                6.691968000e+00f, 6.727968000e+00f, 6.763968000e+00f, 6.799968000e+00f, 7.686792000e+00f, 7.727616000e+00f, 7.768440000e+00f, 7.809264000e+00f, 6.981120000e+00f, 7.017696000e+00f, 7.054272000e+00f, 7.090848000e+00f,
                7.688208000e+00f, 7.723584000e+00f, 7.758960000e+00f, 7.794336000e+00f, 8.805060000e+00f, 8.845155000e+00f, 8.885250000e+00f, 8.925345000e+00f, 7.972272000e+00f, 8.008176000e+00f, 8.044080000e+00f, 8.079984000e+00f,
                3.280288000e+00f, 3.306072000e+00f, 3.331856000e+00f, 3.357640000e+00f, 3.803184000e+00f, 3.832488000e+00f, 3.861792000e+00f, 3.891096000e+00f, 3.487968000e+00f, 3.514280000e+00f, 3.540592000e+00f, 3.566904000e+00f,
                4.276608000e+00f, 4.307328000e+00f, 4.338048000e+00f, 4.368768000e+00f, 4.945968000e+00f, 4.980852000e+00f, 5.015736000e+00f, 5.050620000e+00f, 4.523904000e+00f, 4.555200000e+00f, 4.586496000e+00f, 4.617792000e+00f,
                5.456672000e+00f, 5.492760000e+00f, 5.528848000e+00f, 5.564936000e+00f, 6.297408000e+00f, 6.338358000e+00f, 6.379308000e+00f, 6.420258000e+00f, 5.747040000e+00f, 5.783752000e+00f, 5.820464000e+00f, 5.857176000e+00f,
                6.668160000e+00f, 6.704064000e+00f, 6.739968000e+00f, 6.775872000e+00f, 7.659792000e+00f, 7.700508000e+00f, 7.741224000e+00f, 7.781940000e+00f, 6.956928000e+00f, 6.993408000e+00f, 7.029888000e+00f, 7.066368000e+00f,
                7.664800000e+00f, 7.700088000e+00f, 7.735376000e+00f, 7.770664000e+00f, 8.778528000e+00f, 8.818524000e+00f, 8.858520000e+00f, 8.898516000e+00f, 7.948512000e+00f, 7.984328000e+00f, 8.020144000e+00f, 8.055960000e+00f,
                3.263216000e+00f, 3.288912000e+00f, 3.314608000e+00f, 3.340304000e+00f, 3.783780000e+00f, 3.812985000e+00f, 3.842190000e+00f, 3.871395000e+00f, 3.470544000e+00f, 3.496768000e+00f, 3.522992000e+00f, 3.549216000e+00f,
                4.256256000e+00f, 4.286880000e+00f, 4.317504000e+00f, 4.348128000e+00f, 4.922856000e+00f, 4.957632000e+00f, 4.992408000e+00f, 5.027184000e+00f, 4.503168000e+00f, 4.534368000e+00f, 4.565568000e+00f, 4.596768000e+00f,
                5.432752000e+00f, 5.468736000e+00f, 5.504720000e+00f, 5.540704000e+00f, 6.270264000e+00f, 6.311097000e+00f, 6.351930000e+00f, 6.392763000e+00f, 5.722704000e+00f, 5.759312000e+00f, 5.795920000e+00f, 5.832528000e+00f,
                6.644352000e+00f, 6.680160000e+00f, 6.715968000e+00f, 6.751776000e+00f, 7.632792000e+00f, 7.673400000e+00f, 7.714008000e+00f, 7.754616000e+00f, 6.932736000e+00f, 6.969120000e+00f, 7.005504000e+00f, 7.041888000e+00f,
                7.641392000e+00f, 7.676592000e+00f, 7.711792000e+00f, 7.746992000e+00f, 8.751996000e+00f, 8.791893000e+00f, 8.831790000e+00f, 8.871687000e+00f, 7.924752000e+00f, 7.960480000e+00f, 7.996208000e+00f, 8.031936000e+00f,
                3.246144000e+00f, 3.271752000e+00f, 3.297360000e+00f, 3.322968000e+00f, 3.764376000e+00f, 3.793482000e+00f, 3.822588000e+00f, 3.851694000e+00f, 3.453120000e+00f, 3.479256000e+00f, 3.505392000e+00f, 3.531528000e+00f,
                4.235904000e+00f, 4.266432000e+00f, 4.296960000e+00f, 4.327488000e+00f, 4.899744000e+00f, 4.934412000e+00f, 4.969080000e+00f, 5.003748000e+00f, 4.482432000e+00f, 4.513536000e+00f, 4.544640000e+00f, 4.575744000e+00f,
                5.408832000e+00f, 5.444712000e+00f, 5.480592000e+00f, 5.516472000e+00f, 6.243120000e+00f, 6.283836000e+00f, 6.324552000e+00f, 6.365268000e+00f, 5.698368000e+00f, 5.734872000e+00f, 5.771376000e+00f, 5.807880000e+00f,
                6.620544000e+00f, 6.656256000e+00f, 6.691968000e+00f, 6.727680000e+00f, 7.605792000e+00f, 7.646292000e+00f, 7.686792000e+00f, 7.727292000e+00f, 6.908544000e+00f, 6.944832000e+00f, 6.981120000e+00f, 7.017408000e+00f,
                7.617984000e+00f, 7.653096000e+00f, 7.688208000e+00f, 7.723320000e+00f, 8.725464000e+00f, 8.765262000e+00f, 8.805060000e+00f, 8.844858000e+00f, 7.900992000e+00f, 7.936632000e+00f, 7.972272000e+00f, 8.007912000e+00f,
            };

            float[] gw_actual = gw.ToFloatArray();

            AssertError.Tolerance(gw_expect, gw_actual, 1e-7f, 1e-5f, $"mismatch value {inchannels},{outchannels},{kwidth},{inwidth}");
        }
    }
}
