using AvxBlas;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Linq;

namespace AvxBlasTest.Connection2DTest {
    [TestClass]
    public class BackwardFilterPadNoneTest {
        [TestMethod]
        public void SBackwardFilterPadNoneTest() {
            float max_err = 0;

            foreach (uint n in new int[] { 1, 2 }) {
                foreach ((uint iw, uint ih) in new (uint, uint)[] { (1, 1), (1, 4), (4, 1), (2, 3), (5, 8), (7, 6), (16, 15), (17, 28), (32, 30) }) {
                    foreach ((uint kw, uint kh) in new (uint, uint)[] { (1, 1), (1, 3), (3, 1), (3, 3), (3, 5), (5, 3), (7, 7) }) {
                        if (iw < kw || ih < kh) {
                            continue;
                        }
                        uint ow = iw - kw + 1, oh = ih - kh + 1;

                        foreach ((uint ic, uint oc) in new (uint, uint)[] { (1, 1), (2, 3), (3, 2), (4, 5), (5, 4), (8, 10), (10, 8),
                                                                            (7, 16), (16, 7), (9, 24), (24, 9), (31, 32), (32, 31), (43, 48), (48, 43), (15, 64), (64, 15) }) {

                            float[] xval = (new float[iw * ih * ic * n]).Select((_, idx) => idx * 1e-3f).ToArray();
                            float[] gyval = (new float[ow * oh * oc * n]).Select((_, idx) => idx * 1e-3f).Reverse().ToArray();

                            Map2D x = new((int)ic, (int)iw, (int)ih, (int)n, xval);
                            Map2D gy = new((int)oc, (int)ow, (int)oh, (int)n, gyval);

                            Filter2D gw = Reference(x, gy, (int)kw, (int)kh);

                            Array<float> x_tensor = xval;
                            Array<float> gy_tensor = gyval;

                            Array<float> gw_tensor = new(ic * oc * kw * kh, zeroset: false);

                            Convolution2D.BackwardFilter(n, ic, oc, iw, ih, kw, kh, PadMode.None, x_tensor, gy_tensor, gw_tensor);

                            float[] gw_expect = gw.ToFloatArray();
                            float[] gw_actual = gw_tensor;

                            CollectionAssert.AreEqual(xval, (float[])x_tensor);
                            CollectionAssert.AreEqual(gyval, (float[])gy_tensor);

                            AssertError.Tolerance(gw_expect, gw_actual, 1e-6f, 1e-4f, ref max_err, $"NG: {ic},{oc},{iw},{ih},{kw},{kh},{n}");

                            Console.WriteLine($"OK: {ic},{oc},{iw},{ih},{kw},{kh},{n}");
                        }
                    }
                }
            }

            Console.WriteLine($"maxerr:{max_err}");
        }

        public static Filter2D Reference(Map2D x, Map2D gy, int kw, int kh) {
            int inchannels = x.Channels, outchannels = gy.Channels, batch = x.Batch;
            int iw = x.Width, ow = gy.Width, ih = x.Height, oh = gy.Height;

            if (ow != iw - kw + 1 || oh != ih - kh + 1) {
                throw new ArgumentException("mismatch shape");
            }

            Filter2D w = new(inchannels, kw, kh, outchannels);

            for (int th = 0; th < batch; th++) {
                for (int ky = 0; ky < kh; ky++) {
                    for (int kx = 0; kx < kw; kx++) {
                        for (int iy = ky, oy = 0; oy < oh; iy++, oy++) {
                            for (int ix = kx, ox = 0; ox < ow; ix++, ox++) {
                                for (int inch, outch = 0; outch < outchannels; outch++) {
                                    for (inch = 0; inch < inchannels; inch++) {
                                        w[inch, kx, ky, outch] += x[inch, ix, iy, th] * gy[outch, ox, oy, th];
                                    }
                                }
                            }
                        }
                    }
                }
            }

            return w;
        }

        [TestMethod]
        public void ReferenceTest() {
            int inchannels = 4, outchannels = 6;
            int kwidth = 3, kheight = 5, inwidth = 9, inheight = 13;
            int outwidth = inwidth - kwidth + 1, outheight = inheight - kheight + 1;

            float[] xval = (new float[inwidth * inheight * inchannels]).Select((_, idx) => idx * 1e-3f).ToArray();
            float[] gyval = (new float[outwidth * outheight * outchannels]).Select((_, idx) => idx * 1e-3f).Reverse().ToArray();

            Map2D x = new(inchannels, inwidth, inheight, 1, xval);
            Map2D gy = new(outchannels, outwidth, outheight, 1, gyval);

            Filter2D gw = Reference(x, gy, kwidth, kheight);

            float[] gw_expect = {
                1.236060000e+00f, 1.248093000e+00f, 1.260126000e+00f, 1.272159000e+00f, 1.284192000e+00f, 1.296225000e+00f, 1.308258000e+00f, 1.320291000e+00f, 1.332324000e+00f, 1.344357000e+00f, 1.356390000e+00f, 1.368423000e+00f,
                1.669248000e+00f, 1.681281000e+00f, 1.693314000e+00f, 1.705347000e+00f, 1.717380000e+00f, 1.729413000e+00f, 1.741446000e+00f, 1.753479000e+00f, 1.765512000e+00f, 1.777545000e+00f, 1.789578000e+00f, 1.801611000e+00f,
                2.102436000e+00f, 2.114469000e+00f, 2.126502000e+00f, 2.138535000e+00f, 2.150568000e+00f, 2.162601000e+00f, 2.174634000e+00f, 2.186667000e+00f, 2.198700000e+00f, 2.210733000e+00f, 2.222766000e+00f, 2.234799000e+00f,
                2.535624000e+00f, 2.547657000e+00f, 2.559690000e+00f, 2.571723000e+00f, 2.583756000e+00f, 2.595789000e+00f, 2.607822000e+00f, 2.619855000e+00f, 2.631888000e+00f, 2.643921000e+00f, 2.655954000e+00f, 2.667987000e+00f,
                2.968812000e+00f, 2.980845000e+00f, 2.992878000e+00f, 3.004911000e+00f, 3.016944000e+00f, 3.028977000e+00f, 3.041010000e+00f, 3.053043000e+00f, 3.065076000e+00f, 3.077109000e+00f, 3.089142000e+00f, 3.101175000e+00f,
                1.226232000e+00f, 1.238202000e+00f, 1.250172000e+00f, 1.262142000e+00f, 1.274112000e+00f, 1.286082000e+00f, 1.298052000e+00f, 1.310022000e+00f, 1.321992000e+00f, 1.333962000e+00f, 1.345932000e+00f, 1.357902000e+00f,
                1.657152000e+00f, 1.669122000e+00f, 1.681092000e+00f, 1.693062000e+00f, 1.705032000e+00f, 1.717002000e+00f, 1.728972000e+00f, 1.740942000e+00f, 1.752912000e+00f, 1.764882000e+00f, 1.776852000e+00f, 1.788822000e+00f,
                2.088072000e+00f, 2.100042000e+00f, 2.112012000e+00f, 2.123982000e+00f, 2.135952000e+00f, 2.147922000e+00f, 2.159892000e+00f, 2.171862000e+00f, 2.183832000e+00f, 2.195802000e+00f, 2.207772000e+00f, 2.219742000e+00f,
                2.518992000e+00f, 2.530962000e+00f, 2.542932000e+00f, 2.554902000e+00f, 2.566872000e+00f, 2.578842000e+00f, 2.590812000e+00f, 2.602782000e+00f, 2.614752000e+00f, 2.626722000e+00f, 2.638692000e+00f, 2.650662000e+00f,
                2.949912000e+00f, 2.961882000e+00f, 2.973852000e+00f, 2.985822000e+00f, 2.997792000e+00f, 3.009762000e+00f, 3.021732000e+00f, 3.033702000e+00f, 3.045672000e+00f, 3.057642000e+00f, 3.069612000e+00f, 3.081582000e+00f,
                1.216404000e+00f, 1.228311000e+00f, 1.240218000e+00f, 1.252125000e+00f, 1.264032000e+00f, 1.275939000e+00f, 1.287846000e+00f, 1.299753000e+00f, 1.311660000e+00f, 1.323567000e+00f, 1.335474000e+00f, 1.347381000e+00f,
                1.645056000e+00f, 1.656963000e+00f, 1.668870000e+00f, 1.680777000e+00f, 1.692684000e+00f, 1.704591000e+00f, 1.716498000e+00f, 1.728405000e+00f, 1.740312000e+00f, 1.752219000e+00f, 1.764126000e+00f, 1.776033000e+00f,
                2.073708000e+00f, 2.085615000e+00f, 2.097522000e+00f, 2.109429000e+00f, 2.121336000e+00f, 2.133243000e+00f, 2.145150000e+00f, 2.157057000e+00f, 2.168964000e+00f, 2.180871000e+00f, 2.192778000e+00f, 2.204685000e+00f,
                2.502360000e+00f, 2.514267000e+00f, 2.526174000e+00f, 2.538081000e+00f, 2.549988000e+00f, 2.561895000e+00f, 2.573802000e+00f, 2.585709000e+00f, 2.597616000e+00f, 2.609523000e+00f, 2.621430000e+00f, 2.633337000e+00f,
                2.931012000e+00f, 2.942919000e+00f, 2.954826000e+00f, 2.966733000e+00f, 2.978640000e+00f, 2.990547000e+00f, 3.002454000e+00f, 3.014361000e+00f, 3.026268000e+00f, 3.038175000e+00f, 3.050082000e+00f, 3.061989000e+00f,
                1.206576000e+00f, 1.218420000e+00f, 1.230264000e+00f, 1.242108000e+00f, 1.253952000e+00f, 1.265796000e+00f, 1.277640000e+00f, 1.289484000e+00f, 1.301328000e+00f, 1.313172000e+00f, 1.325016000e+00f, 1.336860000e+00f,
                1.632960000e+00f, 1.644804000e+00f, 1.656648000e+00f, 1.668492000e+00f, 1.680336000e+00f, 1.692180000e+00f, 1.704024000e+00f, 1.715868000e+00f, 1.727712000e+00f, 1.739556000e+00f, 1.751400000e+00f, 1.763244000e+00f,
                2.059344000e+00f, 2.071188000e+00f, 2.083032000e+00f, 2.094876000e+00f, 2.106720000e+00f, 2.118564000e+00f, 2.130408000e+00f, 2.142252000e+00f, 2.154096000e+00f, 2.165940000e+00f, 2.177784000e+00f, 2.189628000e+00f,
                2.485728000e+00f, 2.497572000e+00f, 2.509416000e+00f, 2.521260000e+00f, 2.533104000e+00f, 2.544948000e+00f, 2.556792000e+00f, 2.568636000e+00f, 2.580480000e+00f, 2.592324000e+00f, 2.604168000e+00f, 2.616012000e+00f,
                2.912112000e+00f, 2.923956000e+00f, 2.935800000e+00f, 2.947644000e+00f, 2.959488000e+00f, 2.971332000e+00f, 2.983176000e+00f, 2.995020000e+00f, 3.006864000e+00f, 3.018708000e+00f, 3.030552000e+00f, 3.042396000e+00f,
                1.196748000e+00f, 1.208529000e+00f, 1.220310000e+00f, 1.232091000e+00f, 1.243872000e+00f, 1.255653000e+00f, 1.267434000e+00f, 1.279215000e+00f, 1.290996000e+00f, 1.302777000e+00f, 1.314558000e+00f, 1.326339000e+00f,
                1.620864000e+00f, 1.632645000e+00f, 1.644426000e+00f, 1.656207000e+00f, 1.667988000e+00f, 1.679769000e+00f, 1.691550000e+00f, 1.703331000e+00f, 1.715112000e+00f, 1.726893000e+00f, 1.738674000e+00f, 1.750455000e+00f,
                2.044980000e+00f, 2.056761000e+00f, 2.068542000e+00f, 2.080323000e+00f, 2.092104000e+00f, 2.103885000e+00f, 2.115666000e+00f, 2.127447000e+00f, 2.139228000e+00f, 2.151009000e+00f, 2.162790000e+00f, 2.174571000e+00f,
                2.469096000e+00f, 2.480877000e+00f, 2.492658000e+00f, 2.504439000e+00f, 2.516220000e+00f, 2.528001000e+00f, 2.539782000e+00f, 2.551563000e+00f, 2.563344000e+00f, 2.575125000e+00f, 2.586906000e+00f, 2.598687000e+00f,
                2.893212000e+00f, 2.904993000e+00f, 2.916774000e+00f, 2.928555000e+00f, 2.940336000e+00f, 2.952117000e+00f, 2.963898000e+00f, 2.975679000e+00f, 2.987460000e+00f, 2.999241000e+00f, 3.011022000e+00f, 3.022803000e+00f,
                1.186920000e+00f, 1.198638000e+00f, 1.210356000e+00f, 1.222074000e+00f, 1.233792000e+00f, 1.245510000e+00f, 1.257228000e+00f, 1.268946000e+00f, 1.280664000e+00f, 1.292382000e+00f, 1.304100000e+00f, 1.315818000e+00f,
                1.608768000e+00f, 1.620486000e+00f, 1.632204000e+00f, 1.643922000e+00f, 1.655640000e+00f, 1.667358000e+00f, 1.679076000e+00f, 1.690794000e+00f, 1.702512000e+00f, 1.714230000e+00f, 1.725948000e+00f, 1.737666000e+00f,
                2.030616000e+00f, 2.042334000e+00f, 2.054052000e+00f, 2.065770000e+00f, 2.077488000e+00f, 2.089206000e+00f, 2.100924000e+00f, 2.112642000e+00f, 2.124360000e+00f, 2.136078000e+00f, 2.147796000e+00f, 2.159514000e+00f,
                2.452464000e+00f, 2.464182000e+00f, 2.475900000e+00f, 2.487618000e+00f, 2.499336000e+00f, 2.511054000e+00f, 2.522772000e+00f, 2.534490000e+00f, 2.546208000e+00f, 2.557926000e+00f, 2.569644000e+00f, 2.581362000e+00f,
                2.874312000e+00f, 2.886030000e+00f, 2.897748000e+00f, 2.909466000e+00f, 2.921184000e+00f, 2.932902000e+00f, 2.944620000e+00f, 2.956338000e+00f, 2.968056000e+00f, 2.979774000e+00f, 2.991492000e+00f, 3.003210000e+00f,
            };

            float[] gw_actual = gw.ToFloatArray();

            AssertError.Tolerance(gw_expect, gw_actual, 1e-10f, 1e-5f);
        }
    }
}
