using AvxBlas;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Linq;

namespace AvxBlasTest.Connection2DTest {
    [TestClass]
    public class BackwardFilterPadEdgeTest {
        [TestMethod]
        public void SBackwardFilterPadEdgeTest() {
            float max_err = 0;

            foreach (uint n in new int[] { 1, 2 }) {
                foreach ((uint iw, uint ih) in new (uint, uint)[] { (1, 1), (1, 2), (4, 3), (5, 8), (16, 15), (17, 28), (32, 30) }) {
                    foreach ((uint kw, uint kh) in new (uint, uint)[] { (1, 3), (3, 1), (3, 3), (3, 5), (5, 3), (7, 7) }) {
                        uint ow = iw, oh = ih;

                        foreach ((uint ic, uint oc) in new (uint, uint)[] { (1, 1), (2, 3), (3, 2), (4, 5), (5, 4), (8, 10), (10, 8),
                                                                            (7, 16), (16, 7), (9, 24), (24, 9), (31, 32), (32, 31), (15, 64), (64, 15) }) {

                            float[] xval = (new float[iw * ih * ic * n]).Select((_, idx) => idx * 1e-3f).ToArray();
                            float[] gyval = (new float[ow * oh * oc * n]).Select((_, idx) => idx * 1e-3f).Reverse().ToArray();

                            Map2D x = new((int)ic, (int)iw, (int)ih, (int)n, xval);
                            Map2D gy = new((int)oc, (int)ow, (int)oh, (int)n, gyval);

                            Filter2D gw = Reference(x, gy, (int)kw, (int)kh);

                            Array<float> x_tensor = xval;
                            Array<float> gy_tensor = gyval;

                            Array<float> gw_tensor = new(ic * oc * kw * kh, zeroset: false);

                            Convolution2D.BackwardFilter(n, ic, oc, iw, ih, kw, kh, PadMode.Edge, x_tensor, gy_tensor, gw_tensor);

                            float[] gw_expect = gw.ToFloatArray();
                            float[] gw_actual = gw_tensor;

                            CollectionAssert.AreEqual(xval, (float[])x_tensor);
                            CollectionAssert.AreEqual(gyval, (float[])gy_tensor);

                            AssertError.Tolerance(gw_expect, gw_actual, 1e-6f, 1e-4f, ref max_err, $"NG: {ic},{oc},{iw},{ih},{kw},{kh},{n}");

                            Console.WriteLine($"OK: {ic},{oc},{iw},{ih},{kw},{kh},{n}");
                        }
                    }
                }
            }

            Console.WriteLine($"maxerr:{max_err}");
        }

        public static Filter2D Reference(Map2D x, Map2D gy, int kw, int kh) {
            int inchannels = x.Channels, outchannels = gy.Channels, batch = x.Batch;
            int iw = x.Width, ow = gy.Width, ih = x.Height, oh = gy.Height;

            if (ow != iw || oh != ih) {
                throw new ArgumentException("mismatch shape");
            }

            Filter2D w = new(inchannels, kw, kh, outchannels);

            for (int th = 0; th < batch; th++) {
                for (int ky = 0; ky < kh; ky++) {
                    for (int kx = 0; kx < kw; kx++) {
                        for (int oy = 0; oy < oh; oy++) {
                            int iy = Math.Min(ih - 1, Math.Max(0, ky + oy - kh / 2));

                            for (int ox = 0; ox < ow; ox++) {
                                int ix = Math.Min(iw - 1, Math.Max(0, kx + ox - kw / 2));

                                for (int inch, outch = 0; outch < outchannels; outch++) {
                                    for (inch = 0; inch < inchannels; inch++) {
                                        w[inch, kx, ky, outch] += x[inch, ix, iy, th] * gy[outch, ox, oy, th];
                                    }
                                }
                            }
                        }
                    }
                }
            }

            return w;
        }

        [TestMethod]
        public void ReferenceTest() {
            int inchannels = 4, outchannels = 6;
            int kwidth = 3, kheight = 5, inwidth = 9, inheight = 13;
            int outwidth = inwidth, outheight = inheight;

            float[] xval = (new float[inwidth * inheight * inchannels]).Select((_, idx) => idx * 1e-3f).ToArray();
            float[] gyval = (new float[outwidth * outheight * outchannels]).Select((_, idx) => idx * 1e-3f).Reverse().ToArray();

            Map2D x = new(inchannels, inwidth, inheight, 1, xval);
            Map2D gy = new(outchannels, outwidth, outheight, 1, gyval);

            Filter2D gw = Reference(x, gy, kwidth, kheight);

            float[] gw_expect = {
                3.900116000e+00f, 3.941417000e+00f, 3.982718000e+00f, 4.024019000e+00f, 4.045716000e+00f, 4.087017000e+00f, 4.128318000e+00f, 4.169619000e+00f, 4.193812000e+00f, 4.235113000e+00f, 4.276414000e+00f, 4.317715000e+00f,
                4.965752000e+00f, 5.007053000e+00f, 5.048354000e+00f, 5.089655000e+00f, 5.111352000e+00f, 5.152653000e+00f, 5.193954000e+00f, 5.235255000e+00f, 5.259448000e+00f, 5.300749000e+00f, 5.342050000e+00f, 5.383351000e+00f,
                6.233240000e+00f, 6.274541000e+00f, 6.315842000e+00f, 6.357143000e+00f, 6.378840000e+00f, 6.420141000e+00f, 6.461442000e+00f, 6.502743000e+00f, 6.526936000e+00f, 6.568237000e+00f, 6.609538000e+00f, 6.650839000e+00f,
                7.710680000e+00f, 7.751981000e+00f, 7.793282000e+00f, 7.834583000e+00f, 7.856280000e+00f, 7.897581000e+00f, 7.938882000e+00f, 7.980183000e+00f, 8.004376000e+00f, 8.045677000e+00f, 8.086978000e+00f, 8.128279000e+00f,
                9.161228000e+00f, 9.202529000e+00f, 9.243830000e+00f, 9.285131000e+00f, 9.306828000e+00f, 9.348129000e+00f, 9.389430000e+00f, 9.430731000e+00f, 9.454924000e+00f, 9.496225000e+00f, 9.537526000e+00f, 9.578827000e+00f,
                3.880840000e+00f, 3.922024000e+00f, 3.963208000e+00f, 4.004392000e+00f, 4.026024000e+00f, 4.067208000e+00f, 4.108392000e+00f, 4.149576000e+00f, 4.173704000e+00f, 4.214888000e+00f, 4.256072000e+00f, 4.297256000e+00f,
                4.942912000e+00f, 4.984096000e+00f, 5.025280000e+00f, 5.066464000e+00f, 5.088096000e+00f, 5.129280000e+00f, 5.170464000e+00f, 5.211648000e+00f, 5.235776000e+00f, 5.276960000e+00f, 5.318144000e+00f, 5.359328000e+00f,
                6.206512000e+00f, 6.247696000e+00f, 6.288880000e+00f, 6.330064000e+00f, 6.351696000e+00f, 6.392880000e+00f, 6.434064000e+00f, 6.475248000e+00f, 6.499376000e+00f, 6.540560000e+00f, 6.581744000e+00f, 6.622928000e+00f,
                7.680064000e+00f, 7.721248000e+00f, 7.762432000e+00f, 7.803616000e+00f, 7.825248000e+00f, 7.866432000e+00f, 7.907616000e+00f, 7.948800000e+00f, 7.972928000e+00f, 8.014112000e+00f, 8.055296000e+00f, 8.096480000e+00f,
                9.127048000e+00f, 9.168232000e+00f, 9.209416000e+00f, 9.250600000e+00f, 9.272232000e+00f, 9.313416000e+00f, 9.354600000e+00f, 9.395784000e+00f, 9.419912000e+00f, 9.461096000e+00f, 9.502280000e+00f, 9.543464000e+00f,
                3.861564000e+00f, 3.902631000e+00f, 3.943698000e+00f, 3.984765000e+00f, 4.006332000e+00f, 4.047399000e+00f, 4.088466000e+00f, 4.129533000e+00f, 4.153596000e+00f, 4.194663000e+00f, 4.235730000e+00f, 4.276797000e+00f,
                4.920072000e+00f, 4.961139000e+00f, 5.002206000e+00f, 5.043273000e+00f, 5.064840000e+00f, 5.105907000e+00f, 5.146974000e+00f, 5.188041000e+00f, 5.212104000e+00f, 5.253171000e+00f, 5.294238000e+00f, 5.335305000e+00f,
                6.179784000e+00f, 6.220851000e+00f, 6.261918000e+00f, 6.302985000e+00f, 6.324552000e+00f, 6.365619000e+00f, 6.406686000e+00f, 6.447753000e+00f, 6.471816000e+00f, 6.512883000e+00f, 6.553950000e+00f, 6.595017000e+00f,
                7.649448000e+00f, 7.690515000e+00f, 7.731582000e+00f, 7.772649000e+00f, 7.794216000e+00f, 7.835283000e+00f, 7.876350000e+00f, 7.917417000e+00f, 7.941480000e+00f, 7.982547000e+00f, 8.023614000e+00f, 8.064681000e+00f,
                9.092868000e+00f, 9.133935000e+00f, 9.175002000e+00f, 9.216069000e+00f, 9.237636000e+00f, 9.278703000e+00f, 9.319770000e+00f, 9.360837000e+00f, 9.384900000e+00f, 9.425967000e+00f, 9.467034000e+00f, 9.508101000e+00f,
                3.842288000e+00f, 3.883238000e+00f, 3.924188000e+00f, 3.965138000e+00f, 3.986640000e+00f, 4.027590000e+00f, 4.068540000e+00f, 4.109490000e+00f, 4.133488000e+00f, 4.174438000e+00f, 4.215388000e+00f, 4.256338000e+00f,
                4.897232000e+00f, 4.938182000e+00f, 4.979132000e+00f, 5.020082000e+00f, 5.041584000e+00f, 5.082534000e+00f, 5.123484000e+00f, 5.164434000e+00f, 5.188432000e+00f, 5.229382000e+00f, 5.270332000e+00f, 5.311282000e+00f,
                6.153056000e+00f, 6.194006000e+00f, 6.234956000e+00f, 6.275906000e+00f, 6.297408000e+00f, 6.338358000e+00f, 6.379308000e+00f, 6.420258000e+00f, 6.444256000e+00f, 6.485206000e+00f, 6.526156000e+00f, 6.567106000e+00f,
                7.618832000e+00f, 7.659782000e+00f, 7.700732000e+00f, 7.741682000e+00f, 7.763184000e+00f, 7.804134000e+00f, 7.845084000e+00f, 7.886034000e+00f, 7.910032000e+00f, 7.950982000e+00f, 7.991932000e+00f, 8.032882000e+00f,
                9.058688000e+00f, 9.099638000e+00f, 9.140588000e+00f, 9.181538000e+00f, 9.203040000e+00f, 9.243990000e+00f, 9.284940000e+00f, 9.325890000e+00f, 9.349888000e+00f, 9.390838000e+00f, 9.431788000e+00f, 9.472738000e+00f,
                3.823012000e+00f, 3.863845000e+00f, 3.904678000e+00f, 3.945511000e+00f, 3.966948000e+00f, 4.007781000e+00f, 4.048614000e+00f, 4.089447000e+00f, 4.113380000e+00f, 4.154213000e+00f, 4.195046000e+00f, 4.235879000e+00f,
                4.874392000e+00f, 4.915225000e+00f, 4.956058000e+00f, 4.996891000e+00f, 5.018328000e+00f, 5.059161000e+00f, 5.099994000e+00f, 5.140827000e+00f, 5.164760000e+00f, 5.205593000e+00f, 5.246426000e+00f, 5.287259000e+00f,
                6.126328000e+00f, 6.167161000e+00f, 6.207994000e+00f, 6.248827000e+00f, 6.270264000e+00f, 6.311097000e+00f, 6.351930000e+00f, 6.392763000e+00f, 6.416696000e+00f, 6.457529000e+00f, 6.498362000e+00f, 6.539195000e+00f,
                7.588216000e+00f, 7.629049000e+00f, 7.669882000e+00f, 7.710715000e+00f, 7.732152000e+00f, 7.772985000e+00f, 7.813818000e+00f, 7.854651000e+00f, 7.878584000e+00f, 7.919417000e+00f, 7.960250000e+00f, 8.001083000e+00f,
                9.024508000e+00f, 9.065341000e+00f, 9.106174000e+00f, 9.147007000e+00f, 9.168444000e+00f, 9.209277000e+00f, 9.250110000e+00f, 9.290943000e+00f, 9.314876000e+00f, 9.355709000e+00f, 9.396542000e+00f, 9.437375000e+00f,
                3.803736000e+00f, 3.844452000e+00f, 3.885168000e+00f, 3.925884000e+00f, 3.947256000e+00f, 3.987972000e+00f, 4.028688000e+00f, 4.069404000e+00f, 4.093272000e+00f, 4.133988000e+00f, 4.174704000e+00f, 4.215420000e+00f,
                4.851552000e+00f, 4.892268000e+00f, 4.932984000e+00f, 4.973700000e+00f, 4.995072000e+00f, 5.035788000e+00f, 5.076504000e+00f, 5.117220000e+00f, 5.141088000e+00f, 5.181804000e+00f, 5.222520000e+00f, 5.263236000e+00f,
                6.099600000e+00f, 6.140316000e+00f, 6.181032000e+00f, 6.221748000e+00f, 6.243120000e+00f, 6.283836000e+00f, 6.324552000e+00f, 6.365268000e+00f, 6.389136000e+00f, 6.429852000e+00f, 6.470568000e+00f, 6.511284000e+00f,
                7.557600000e+00f, 7.598316000e+00f, 7.639032000e+00f, 7.679748000e+00f, 7.701120000e+00f, 7.741836000e+00f, 7.782552000e+00f, 7.823268000e+00f, 7.847136000e+00f, 7.887852000e+00f, 7.928568000e+00f, 7.969284000e+00f,
                8.990328000e+00f, 9.031044000e+00f, 9.071760000e+00f, 9.112476000e+00f, 9.133848000e+00f, 9.174564000e+00f, 9.215280000e+00f, 9.255996000e+00f, 9.279864000e+00f, 9.320580000e+00f, 9.361296000e+00f, 9.402012000e+00f,
            };

            float[] gw_actual = gw.ToFloatArray();

            AssertError.Tolerance(gw_expect, gw_actual, 1e-7f, 1e-5f, $"mismatch value {inchannels},{outchannels},{kwidth},{inwidth}");
        }
    }
}
